{"ast":null,"code":"var _jsxFileName = \"/home/hazard/react/project/01-project/my-app/src/components/common/Paginator/Paginator.jsx\";\nimport React, { useState } from \"react\";\nimport styles from './Paginator.module.css';\n\nconst Paginator = (totalPageCount, pageSize, currentPage, onPageChanged) => {\n  let portionSize = 10;\n  let pagesCount = Math.ceil(totalPageCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    if (i <= 20) {\n      pages.push(i);\n    }\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.paginator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }\n  }, portionNumber > 1 && /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, \"PREV\"), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: currentPage === p ? styles.selectedPage : styles.pageNumber,\n      onClick: e => {\n        onPageChanged(p);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 20\n      }\n    }, p);\n  }), portionCount > portionNumber && /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"NEXT\"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["/home/hazard/react/project/01-project/my-app/src/components/common/Paginator/Paginator.jsx"],"names":["React","useState","styles","Paginator","totalPageCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","filter","p","map","selectedPage","pageNumber","e"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;AAEA,MAAMC,SAAS,GAAG,CAACC,cAAD,EAAiBC,QAAjB,EAA2BC,WAA3B,EAAwCC,aAAxC,KAA0D;AAC5E,MAAIC,WAAW,GAAG,EAAlB;AACI,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,cAAc,GAAGC,QAA3B,CAAjB;AACA,MAAIO,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClC,QAAIA,CAAC,IAAI,EAAT,EAAa;AACTD,MAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;AACJ;;AAED,MAAIE,YAAY,GAAGL,IAAI,CAACC,IAAL,CAAUF,UAAU,GAACD,WAArB,CAAnB;AACA,MAAI,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIiB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBR,WAAtB,GAAoC,CAAhE;AACA,MAAIW,sBAAsB,GAAGH,aAAa,GAAGR,WAA7C;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACkB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFJ,aAAa,GAAG,CAAhB,iBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFG,EAGFJ,KAAK,CACDS,MADJ,CACWC,CAAC,IAAGA,CAAC,IAAIJ,qBAAL,IAA8BI,CAAC,IAAIH,sBADlD,EAEII,GAFJ,CAEQD,CAAC,IAAI;AACV,wBAAO;AAAM,MAAA,SAAS,EAAEhB,WAAW,KAAKgB,CAAhB,GAAoBpB,MAAM,CAACsB,YAA3B,GAA0CtB,MAAM,CAACuB,UAAlE;AACM,MAAA,OAAO,EAAGC,CAAD,IAAO;AACZnB,QAAAA,aAAa,CAACe,CAAD,CAAb;AACH,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGUA,CAHV,CAAP;AAIH,GAPA,CAHE,EAWFP,YAAY,GAAGC,aAAf,iBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZG,CAAP;AAcH,CA7BD;;AA+BA,eAAeb,SAAf","sourcesContent":["import React, {useState} from \"react\";\nimport styles from './Paginator.module.css';\n\nconst Paginator = (totalPageCount, pageSize, currentPage, onPageChanged) => {\nlet portionSize = 10\n    let pagesCount = Math.ceil(totalPageCount / pageSize)\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        if (i <= 20) {\n            pages.push(i)\n        }\n    }\n\n    let portionCount = Math.ceil(pagesCount/portionSize)\n    let [portionNumber, setPortionNumber] = useState(1)\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    let rightPortionPageNumber = portionNumber * portionSize\n\n    return <div className={styles.paginator}>\n        {portionNumber > 1 &&\n        <button>PREV</button>}\n        {pages\n            .filter(p=> p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map(p => {\n            return <span className={currentPage === p ? styles.selectedPage : styles.pageNumber}\n                         onClick={(e) => {\n                             onPageChanged(p)\n                         }}>{p}</span>\n        })}\n        {portionCount > portionNumber &&\n        <button>NEXT</button>}\n    </div>\n}\n\nexport default Paginator;\n\n\n"]},"metadata":{},"sourceType":"module"}