{"ast":null,"code":"var _jsxFileName = \"/home/hazard/react/project/react-deploy/src/components/Profile/ProfileContainer.jsx\";\nimport React from 'react';\nimport Profile from \"./Profile\";\nimport { getProfile, getStatus, savePhoto, saveProfile, setUserProfile, updateStatus } from \"../../redux/profileReducer\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n\n    if (!userId) {\n      userId = this.props.authorizesUserId;\n    }\n\n    this.props.getProfile(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Profile, Object.assign({}, this.props, {\n      savePhoto: this.props.savePhoto,\n      isOwner: !this.props.match.params.userId,\n      profile: this.props.profile,\n      status: this.props.status,\n      updateStatus: this.props.updateStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizesUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n});\n\nexport default compose(connect(mapStateToProps, {\n  setUserProfile,\n  getProfile,\n  getStatus,\n  updateStatus,\n  savePhoto,\n  saveProfile\n}), withRouter, withAuthRedirect)(ProfileContainer);","map":{"version":3,"sources":["/home/hazard/react/project/react-deploy/src/components/Profile/ProfileContainer.jsx"],"names":["React","Profile","getProfile","getStatus","savePhoto","saveProfile","setUserProfile","updateStatus","connect","withRouter","withAuthRedirect","compose","ProfileContainer","Component","refreshProfile","userId","props","match","params","authorizesUserId","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","profile","status","mapStateToProps","state","profilePage","auth","isAuth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,UAAR,EAAoBC,SAApB,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,cAAvD,EAAuEC,YAAvE,QAA0F,4BAA1F;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;AACA,SAAQC,OAAR,QAAsB,OAAtB;;AAGA,MAAMC,gBAAN,SAA+BZ,KAAK,CAACa,SAArC,CAA+C;AAC3CC,EAAAA,cAAc,GAAG;AACb,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAArC;;AACA,QAAI,CAACA,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,KAAKC,KAAL,CAAWG,gBAApB;AACH;;AACD,SAAKH,KAAL,CAAWd,UAAX,CAAsBa,MAAtB;AACA,SAAKC,KAAL,CAAWb,SAAX,CAAqBY,MAArB;AACH;;AAEDK,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,cAAL;AACH;;AAEDO,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,QAAI,KAAKR,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAAxB,IAAkCO,SAAS,CAACL,KAAV,CAAgBC,MAAhB,CAAuBH,MAA7D,EAAqE;AACjE,WAAKD,cAAL;AACH;AACJ;;AAEDW,EAAAA,MAAM,GAAG;AACL,wBAAO,oBAAC,OAAD,oBAAa,KAAKT,KAAlB;AACS,MAAA,SAAS,EAAE,KAAKA,KAAL,CAAWZ,SAD/B;AAES,MAAA,OAAO,EAAE,CAAC,KAAKY,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAF3C;AAGS,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWU,OAH7B;AAIS,MAAA,MAAM,EAAE,KAAKV,KAAL,CAAWW,MAJ5B;AAKS,MAAA,YAAY,EAAE,KAAKX,KAAL,CAAWT,YALlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AAMH;;AA3B0C;;AA8B/C,IAAIqB,eAAe,GAAIC,KAAD,KAAY;AAC9BH,EAAAA,OAAO,EAAEG,KAAK,CAACC,WAAN,CAAkBJ,OADG;AAE9BC,EAAAA,MAAM,EAAEE,KAAK,CAACC,WAAN,CAAkBH,MAFI;AAG9BR,EAAAA,gBAAgB,EAAEU,KAAK,CAACE,IAAN,CAAWhB,MAHC;AAI9BiB,EAAAA,MAAM,EAAEH,KAAK,CAACE,IAAN,CAAWC;AAJW,CAAZ,CAAtB;;AAQA,eAAerB,OAAO,CAClBH,OAAO,CAACoB,eAAD,EAAkB;AAACtB,EAAAA,cAAD;AAAiBJ,EAAAA,UAAjB;AAA6BC,EAAAA,SAA7B;AAAwCI,EAAAA,YAAxC;AAAsDH,EAAAA,SAAtD;AAAiEC,EAAAA;AAAjE,CAAlB,CADW,EAElBI,UAFkB,EAGlBC,gBAHkB,CAAP,CAIbE,gBAJa,CAAf","sourcesContent":["import React from 'react';\nimport Profile from \"./Profile\";\nimport {getProfile, getStatus, savePhoto, saveProfile, setUserProfile, updateStatus} from \"../../redux/profileReducer\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nclass ProfileContainer extends React.Component {\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizesUserId\n        }\n        this.props.getProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return <Profile {...this.props}\n                        savePhoto={this.props.savePhoto}\n                        isOwner={!this.props.match.params.userId}\n                        profile={this.props.profile}\n                        status={this.props.status}\n                        updateStatus={this.props.updateStatus}/>\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizesUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\n\nexport default compose(\n    connect(mapStateToProps, {setUserProfile, getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)"]},"metadata":{},"sourceType":"module"}