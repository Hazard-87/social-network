{"ast":null,"code":"var _jsxFileName = \"/home/hazard/react/project/01-project/my-app/src/components/common/Paginator/Paginator.jsx\";\nimport React, { useState } from \"react\";\nimport styles from './Paginator.module.css';\n\nconst Paginator = props => {\n  let portionSize = 10;\n  let pagesCount = Math.ceil(props.totalPageCount / props.pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    if (i <= pagesCount) {\n      pages.push(i);\n    }\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n\n  let prev = e => {\n    setPortionNumber(portionNumber - 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.paginator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"PREV\"), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: props.currentPage === p ? styles.selectedPage : styles.pageNumber,\n      onClick: e => {\n        props.onPageChanged(p);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 20\n      }\n    }, p);\n  }), portionCount > portionNumber && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      setPortionNumber(portionNumber + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"NEXT\"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["/home/hazard/react/project/01-project/my-app/src/components/common/Paginator/Paginator.jsx"],"names":["React","useState","styles","Paginator","props","portionSize","pagesCount","Math","ceil","totalPageCount","pageSize","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","prev","e","paginator","filter","p","map","currentPage","selectedPage","pageNumber","onPageChanged"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC7B,MAAIC,WAAW,GAAG,EAAlB;AACI,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,cAAN,GAAuBL,KAAK,CAACM,QAAvC,CAAjB;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,UAArB,EAAiCM,CAAC,EAAlC,EAAsC;AAClC,QAAIA,CAAC,IAAIN,UAAT,EAAqB;AACjBK,MAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;AACJ;;AAED,MAAIE,YAAY,GAAGP,IAAI,CAACC,IAAL,CAAUF,UAAU,GAACD,WAArB,CAAnB;AACA,MAAI,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIgB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBV,WAAtB,GAAoC,CAAhE;AACA,MAAIa,sBAAsB,GAAGH,aAAa,GAAGV,WAA7C;;AAEA,MAAIc,IAAI,GAAIC,CAAD,IAAO;AACdJ,IAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACH,GAFD;;AAIA,sBAAO;AAAK,IAAA,SAAS,EAAEb,MAAM,CAACmB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,EAEFV,KAAK,CACDW,MADJ,CACWC,CAAC,IAAGA,CAAC,IAAIN,qBAAL,IAA8BM,CAAC,IAAIL,sBADlD,EAEIM,GAFJ,CAEQD,CAAC,IAAI;AACV,wBAAO;AAAM,MAAA,SAAS,EAAEnB,KAAK,CAACqB,WAAN,KAAsBF,CAAtB,GAA0BrB,MAAM,CAACwB,YAAjC,GAAgDxB,MAAM,CAACyB,UAAxE;AACM,MAAA,OAAO,EAAGP,CAAD,IAAO;AACZhB,QAAAA,KAAK,CAACwB,aAAN,CAAoBL,CAApB;AACH,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGUA,CAHV,CAAP;AAIH,GAPA,CAFE,EAUFT,YAAY,GAAGC,aAAf,iBACD;AAAQ,IAAA,OAAO,EAAGK,CAAD,IAAK;AAACJ,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAoC,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXG,CAAP;AAaH,CAhCD;;AAkCA,eAAeZ,SAAf","sourcesContent":["import React, {useState} from \"react\";\nimport styles from './Paginator.module.css';\n\nconst Paginator = (props) => {\nlet portionSize = 10\n    let pagesCount = Math.ceil(props.totalPageCount / props.pageSize)\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        if (i <= pagesCount) {\n            pages.push(i)\n        }\n    }\n\n    let portionCount = Math.ceil(pagesCount/portionSize)\n    let [portionNumber, setPortionNumber] = useState(1)\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    let rightPortionPageNumber = portionNumber * portionSize\n\n    let prev = (e) => {\n        setPortionNumber(portionNumber - 1)\n    }\n\n    return <div className={styles.paginator}>\n        <button>PREV</button>\n        {pages\n            .filter(p=> p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map(p => {\n            return <span className={props.currentPage === p ? styles.selectedPage : styles.pageNumber}\n                         onClick={(e) => {\n                             props.onPageChanged(p)\n                         }}>{p}</span>\n        })}\n        {portionCount > portionNumber &&\n        <button onClick={(e)=>{setPortionNumber(portionNumber + 1)}}>NEXT</button>}\n    </div>\n}\n\nexport default Paginator;\n\n\n"]},"metadata":{},"sourceType":"module"}