{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_AUTH_USER = 'SET_AUTH_USER';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const getAuthUserData = () => {\n  return dispatch => {\n    authAPI.me().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login,\n          isAuth\n        } = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let action = stopSubmit(\"login\", {\n        _error: response.data.messages\n      });\n      dispatch(action);\n    }\n  });\n};\nexport const logout = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n      }\n    });\n  };\n};\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: 'SET_AUTH_USER',\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport default authReducer;","map":{"version":3,"sources":["/home/hazard/react/project/01-project/my-app/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_AUTH_USER","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","getAuthUserData","dispatch","me","then","response","data","resultCode","id","setAuthUserData","password","rememberMe","_error","messages","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AAAoB;AAChB,eAAO,EACH,GAAGO,KADA;AAEH,aAAGC,MAAM,CAACE;AAFP,SAAP;AAIH;;AACD;AACI,aAAOH,KAAP;AARR;AAUH,CAXD;;AAaA,OAAO,MAAMI,eAAe,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAc;AACjBd,IAAAA,OAAO,CAACe,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1B,UAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAACC,UAAAA,EAAD;AAAKf,UAAAA,KAAL;AAAYC,UAAAA,KAAZ;AAAmBC,UAAAA;AAAnB,YAA6BU,QAAQ,CAACC,IAAT,CAAcA,IAA/C;AACAJ,QAAAA,QAAQ,CAACO,eAAe,CAACD,EAAD,EAAKf,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,KALD;AAMH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCT,QAAD,IAAc;AAEhEd,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EAA2CP,IAA3C,CAAgDC,QAAQ,IAAI;AACpD,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,KAFD,MAEO;AACH,UAAIH,MAAM,GAAGT,UAAU,CAAC,OAAD,EAAU;AAACuB,QAAAA,MAAM,EAAEP,QAAQ,CAACC,IAAT,CAAcO;AAAvB,OAAV,CAAvB;AACAX,MAAAA,QAAQ,CAACJ,MAAD,CAAR;AACH;AACJ,GAPL;AAQC,CAVE;AAaP,OAAO,MAAMgB,MAAM,GAAG,MAAM;AACxB,SAAQZ,QAAD,IAAc;AACjBd,IAAAA,OAAO,CAAC0B,MAAR,GAAiBV,IAAjB,CAAsBC,QAAQ,IAAI;AAC9B,UAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,QAAAA,QAAQ,CAACO,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CARM;AAYP,OAAO,MAAMA,eAAe,GAAG,CAACjB,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAACI,EAAAA,IAAI,EAAE,eAAP;AAAwBC,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAAjC,CAAnC,CAAxB;AAEP,eAAeC,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_AUTH_USER = 'SET_AUTH_USER'\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_AUTH_USER: {\n            return {\n                ...state,\n                ...action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const getAuthUserData = () => {\n    return (dispatch) => {\n        authAPI.me().then(response => {\n            if (response.data.resultCode === 0) {\n                let {id, email, login, isAuth} = response.data.data\n                dispatch(setAuthUserData(id, email, login, true))\n            }\n        })\n    }\n}\n\nexport const login = (email, password, rememberMe) => (dispatch) => {\n\n    authAPI.login(email, password, rememberMe).then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(getAuthUserData())\n            } else {\n                let action = stopSubmit(\"login\", {_error: response.data.messages})\n                dispatch(action)\n            }\n        })\n    }\n\n\nexport const logout = () => {\n    return (dispatch) => {\n        authAPI.logout().then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false))\n            }\n        })\n    }\n}\n\n\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: 'SET_AUTH_USER', payload: {userId, email, login, isAuth}})\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}