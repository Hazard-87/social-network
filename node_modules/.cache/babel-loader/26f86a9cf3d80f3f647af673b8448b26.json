{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_AUTH_USER = 'SET_AUTH_USER';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const getAuthUserData = () => {\n  return async dispatch => {\n    let response = await authAPI.me();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login,\n        isAuth\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  };\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n\n    dispatch(stopSubmit(\"login\", {\n      _error: response.data.messages\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => {\n  return async dispatch => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  };\n};\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: 'SET_AUTH_USER',\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: 'GET_CAPTCHA_URL_SUCCESS',\n  payload: {\n    captchaUrl\n  }\n});\nexport default authReducer;","map":{"version":3,"sources":["/home/hazard/react/project/react-deploy/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_AUTH_USER","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","getAuthUserData","dispatch","response","me","data","resultCode","id","setAuthUserData","password","rememberMe","getCaptchaUrl","_error","messages","securityAPI","url","getCaptchaUrlSuccess","logout"],"mappings":"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","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_AUTH_USER = 'SET_AUTH_USER'\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS'\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_AUTH_USER: {\n            return {\n                ...state,\n                ...action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const getAuthUserData = () => {\n    return async (dispatch) => {\n        let response = await authAPI.me()\n        if (response.data.resultCode === 0) {\n            let {id, email, login, isAuth} = response.data.data\n            dispatch(setAuthUserData(id, email, login, true))\n        }\n    }\n}\n\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe)\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData())\n    } else { if (response.data.resultCode === 10) {\n        dispatch(getCaptchaUrl())\n    }\n        dispatch(stopSubmit(\"login\", {_error: response.data.messages}))\n    }\n}\n\nexport const getCaptchaUrl = () => async (dispatch) => {\n    const response = await securityAPI.getCaptchaUrl()\n    const captchaUrl = response.data.url\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\n}\n\n\nexport const logout = () => {\n    return async (dispatch) => {\n        let response = await authAPI.logout()\n        if (response.data.resultCode === 0) {\n            dispatch(setAuthUserData(null, null, null, false))\n        }\n    }\n}\n\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n    type: 'SET_AUTH_USER',\n    payload: {userId, email, login, isAuth}\n})\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({\n    type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n})\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}