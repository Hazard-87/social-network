{"ast":null,"code":"var _jsxFileName = \"/media/hazard/\\u041B\\u043E\\u043A\\u0430\\u043B\\u044C\\u043D\\u044B\\u0439 \\u0434\\u0438\\u0441\\u043A/react/project/react-deploy/src/components/common/FormsControls/FormsControl.js\";\nimport React from \"react\";\nimport styles from './FormsControl.module.css';\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"; // import FormControl from \"@material-ui/core/FormControl\";\n\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport clsx from \"clsx\";\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nconst FormCon = ({\n  input,\n  meta,\n  child,\n  ...props\n}) => {\n  debugger;\n  const hasError = meta.touched && meta.error;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.formControl + \" \" + (hasError ? styles.error : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, props.children), hasError && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 26\n    }\n  }, \" \", meta.error, \" \"));\n};\n\nexport const Textarea = props => {\n  const {\n    input,\n    meta,\n    child,\n    ...restProps\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(FormCon, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, Object.assign({}, input, restProps, {\n    multiline: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 29\n    }\n  }))));\n};\nexport const Input = props => {\n  const {\n    input,\n    meta,\n    child,\n    ...restProps\n  } = props;\n  return /*#__PURE__*/React.createElement(FormCon, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(TextField, Object.assign({}, input, restProps, {\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 32\n    }\n  })));\n};\nexport const Check = props => {\n  const {\n    input,\n    meta,\n    child,\n    ...restProps\n  } = props;\n  return /*#__PURE__*/React.createElement(FormCon, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, input, restProps, {\n      color: \"primary\",\n      inputProps: {\n        'aria-label': 'secondary checkbox'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 59\n      }\n    })),\n    label: \"Remember me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 32\n    }\n  }));\n};\nexport const Checked = props => {\n  const {\n    input,\n    meta,\n    child,\n    ...restProps\n  } = props;\n  return /*#__PURE__*/React.createElement(FormCon, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, input, restProps, {\n      color: \"primary\",\n      inputProps: {\n        'aria-label': 'secondary checkbox'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 59\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 32\n    }\n  }));\n}; //\n// export const Pass = (props) => {\n//     const useStyles = makeStyles((theme) => ({\n//         root: {\n//             display: 'flex',\n//             flexWrap: 'wrap',\n//         },\n//         margin: {\n//             margin: theme.spacing(1),\n//         },\n//         withoutLabel: {\n//             marginTop: theme.spacing(3),\n//         },\n//         textField: {\n//             width: '25ch',\n//         },\n//     }));\n//\n//     const classes = useStyles();\n//     const [values, setValues] = React.useState({\n//         amount: '',\n//         password: '',\n//         weight: '',\n//         weightRange: '',\n//         showPassword: false,\n//     });\n//\n//     const handleChange = (prop) => (event) => {\n//         setValues({ ...values, [prop]: event.target.value });\n//     };\n//\n//     const handleClickShowPassword = () => {\n//         setValues({ ...values, showPassword: !values.showPassword });\n//     };\n//\n//     const handleMouseDownPassword = (event) => {\n//         event.preventDefault();\n//     };\n//\n//     const {input, meta, child, ...restProps} = props\n//     return <FormsControl {...props}><FormControl\n//         className={clsx(classes.margin, classes.textField)} {...input} {...restProps}>\n//         <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\n//         <Input\n//             id=\"standard-adornment-password\"\n//             type={values.showPassword ? 'text' : 'password'}\n//             value={values.password}\n//             onChange={handleChange('password')}\n//             endAdornment={\n//                 <InputAdornment position=\"end\">\n//                     <IconButton\n//                         aria-label=\"toggle password visibility\"\n//                         onClick={handleClickShowPassword}\n//                         onMouseDown={handleMouseDownPassword}\n//                     >\n//                         {values.showPassword ? <Visibility/> : <VisibilityOff/>}\n//                     </IconButton>\n//                 </InputAdornment>\n//             }\n//         />\n//     </FormControl>\n//     </FormsControl>\n//\n//     // <FormControl {...props}><TextField {...input} {...restProps}\n//     //                                           variant=\"outlined\"/></FormControl>\n// }","map":{"version":3,"sources":["/media/hazard/Локальный диск/react/project/react-deploy/src/components/common/FormsControls/FormsControl.js"],"names":["React","styles","TextField","Checkbox","FormControlLabel","InputLabel","InputAdornment","IconButton","clsx","Visibility","VisibilityOff","makeStyles","FormCon","input","meta","child","props","hasError","touched","error","formControl","children","Textarea","restProps","Input","Check","Checked"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styles from './FormsControl.module.css'\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n// import FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport clsx from \"clsx\";\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nconst FormCon = ({input, meta, child, ...props}) => {\n    debugger\n    const hasError = meta.touched && meta.error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {props.children}\n            </div>\n            {hasError && <span> {meta.error} </span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props) => {\n    const {input, meta, child, ...restProps} = props\n    return <div>\n        <FormCon {...props}><TextField  {...input} {...restProps}\n                                             multiline variant=\"outlined\"/></FormCon>\n\n    </div>\n}\nexport const Input = (props) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormCon {...props}><TextField {...input} {...restProps}\n                                               variant=\"outlined\"/></FormCon>\n}\n\nexport const Check = (props) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormCon {...props}><FormControlLabel control={<Checkbox {...input} {...restProps} color=\"primary\"\n                                                                         inputProps={{'aria-label': 'secondary checkbox'}}\n    />} label='Remember me'/></FormCon>\n}\nexport const Checked = (props) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormCon {...props}><FormControlLabel control={<Checkbox {...input} {...restProps} color=\"primary\"\n                                                                         inputProps={{'aria-label': 'secondary checkbox'}}\n    />}/></FormCon>\n}\n\n//\n// export const Pass = (props) => {\n//     const useStyles = makeStyles((theme) => ({\n//         root: {\n//             display: 'flex',\n//             flexWrap: 'wrap',\n//         },\n//         margin: {\n//             margin: theme.spacing(1),\n//         },\n//         withoutLabel: {\n//             marginTop: theme.spacing(3),\n//         },\n//         textField: {\n//             width: '25ch',\n//         },\n//     }));\n//\n//     const classes = useStyles();\n//     const [values, setValues] = React.useState({\n//         amount: '',\n//         password: '',\n//         weight: '',\n//         weightRange: '',\n//         showPassword: false,\n//     });\n//\n//     const handleChange = (prop) => (event) => {\n//         setValues({ ...values, [prop]: event.target.value });\n//     };\n//\n//     const handleClickShowPassword = () => {\n//         setValues({ ...values, showPassword: !values.showPassword });\n//     };\n//\n//     const handleMouseDownPassword = (event) => {\n//         event.preventDefault();\n//     };\n//\n//     const {input, meta, child, ...restProps} = props\n//     return <FormsControl {...props}><FormControl\n//         className={clsx(classes.margin, classes.textField)} {...input} {...restProps}>\n//         <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\n//         <Input\n//             id=\"standard-adornment-password\"\n//             type={values.showPassword ? 'text' : 'password'}\n//             value={values.password}\n//             onChange={handleChange('password')}\n//             endAdornment={\n//                 <InputAdornment position=\"end\">\n//                     <IconButton\n//                         aria-label=\"toggle password visibility\"\n//                         onClick={handleClickShowPassword}\n//                         onMouseDown={handleMouseDownPassword}\n//                     >\n//                         {values.showPassword ? <Visibility/> : <VisibilityOff/>}\n//                     </IconButton>\n//                 </InputAdornment>\n//             }\n//         />\n//     </FormControl>\n//     </FormsControl>\n//\n//     // <FormControl {...props}><TextField {...input} {...restProps}\n//     //                                           variant=\"outlined\"/></FormControl>\n// }"]},"metadata":{},"sourceType":"module"}